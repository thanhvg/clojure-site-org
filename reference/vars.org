Clojure is a practical language that recognizes the occasional need to
maintain a persistent reference to a changing value and provides 4
distinct mechanisms for doing so in a controlled manner - Vars,
[[file:refs.xml][Refs]], [[file:agents.org][Agents]] and
[[file:atoms.org][Atoms]]. Vars provide a mechanism to refer to a
mutable storage location that can be dynamically rebound (to a new
storage location) on a per-thread basis. Every Var can (but needn't)
have a root binding, which is a binding that is shared by all threads
that do not have a per-thread binding. Thus, the value of a Var is the
value of its per-thread binding, or, if it is not bound in the thread
requesting the value, the value of the root binding, if any.

The special form =def= creates (and [[interning][interns]]) a Var. If
the Var did not already exist and no initial value is supplied, the var
is unbound:

#+BEGIN_SRC clojure
    user=> (def x)
    #'user/x
    user=> x
    #object[clojure.lang.Var$Unbound 0x14008db3 "Unbound: #'user/x"]
#+END_SRC

Supplying an initial value binds the root (even if it was already
bound).

#+BEGIN_SRC clojure
    user=> (def x 1)
    #'user/x

    user=> x
    1
#+END_SRC

By default Vars are static, but Vars can be marked as dynamic to allow
per-thread bindings via the macro
[[https://clojure.github.com/clojure/clojure.core-api.html#clojure.core/binding][binding]].
Within each thread they obey a stack discipline:

#+BEGIN_SRC clojure
    user=> (def ^:dynamic x 1)
    user=> (def ^:dynamic y 1)
    user=> (+ x y)
    2

    user=> (binding [x 2 y 3]
             (+ x y))
    5

    user=> (+ x y)
    2
#+END_SRC

Bindings created with =binding= cannot be seen by any other thread.
Likewise, bindings created with =binding= can be assigned to, which
provides a means for a nested context to communicate with code before it
on the call stack. This capability is opt-in only by setting a metadata
tag: =^:dynamic= to true as in the code block above. There are scenarios
that one might wish to redefine static Vars within a context and Clojure
(since version 1.3) provides the functions
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-redefs][with-redefs]]
and
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-redefs-fn][with-redefs-fn]]
for such purposes.

Functions defined with
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defn][defn]]
are stored in Vars, allowing for the re-definition of functions in a
running program. This also enables many of the possibilities of aspect-
or context-oriented programming. For instance, you could wrap a function
with logging behavior only in certain call contexts or threads.

* Binding conveyance
  :PROPERTIES:
  :CUSTOM_ID: conveyance
  :END:

Some Clojure concurrency functions (futures,
[[file:agents.org][agents]]) provide "binding conveyance", which allows
the current set of dynamic bindings to be conveyed to another thread for
the purpose of continuing work asynchronously with the same environment.
This functionality is provided by
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/future][future]],
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/send][send]],
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/send-off][send-off]],
and
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/pmap][pmap]].

#+BEGIN_SRC clojure
    (def ^:dynamic *num* 1)
    (binding [*num* 2] (future (println *num*)))
    ;; prints "2", not "1"
#+END_SRC

* (*set!* var-symbol expr)
  :PROPERTIES:
  :CUSTOM_ID: set
  :END:

Assignment special form.

When the first operand is a symbol, it must resolve to a global var. The
value of the var's current thread binding is set to the value of expr.
Currently, it is an error to attempt to set the root binding of a var
using set!, i.e. var assignments are thread-local. In all cases the
value of expr is returned.

Note - /you cannot assign to function params or local bindings. Only
Java fields, Vars, Refs and Agents are mutable in Clojure/.

Using [[file:java_interop.xml#set][set]] for Java fields is documented
in [[file:java_interop.xml#set][Java Interop]].

* Interning
  :PROPERTIES:
  :CUSTOM_ID: interning
  :END:

The Namespace system maintains global maps of symbols to Var objects
/(see [[file:namespaces.org][Namespaces]])/. If a =def= expression does
not find an interned entry in the current namespace for the symbol being
def-ed, it creates one, otherwise it uses the existing Var. This
find-or-create process is called interning. This means that, unless they
have been unmap-ed, Var objects are stable references and need not be
looked up every time. It also means that namespaces constitute a global
environment in which, as described in
[[file:evaluation.org][Evaluation]], the compiler attempts to resolve
all free symbols as Vars.

The [[file:special_forms.xml#var][var]] special form or the =#'= reader
macro /(see [[file:reader.org][Reader]])/ can be used to get an interned
Var object instead of its current value.

* Non-interned Vars
  :PROPERTIES:
  :CUSTOM_ID: local-vars
  :END:

It is possible to create vars that are not interned by using
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-local-vars][with-local-vars]].
These vars will not be found during free symbol resolution, and their
values have to be accessed manually. But they can serve as useful
thread-local mutable cells.

* Related functions
  :PROPERTIES:
  :CUSTOM_ID: related
  :END:

Variants of =def=:
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defn][defn]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defn-][defn-]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/definline][definline]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defmacro][defmacro]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defmethod][defmethod]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defmulti][defmulti]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defonce][defonce]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/defstruct][defstruct]]\\
Working with interned Vars:
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/declare][declare]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/intern][intern]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/binding][binding]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/find-var][find-var]]
[[file:special_forms.xml#var][var]]\\
Working with Var objects:
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-local-vars][with-local-vars]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/var-get][var-get]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/var-set][var-set]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/alter-var-root][alter-var-root]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/var?][var?]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-redefs][with-redefs]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-redefs-fn][with-redefs-fn]]\\
Var validators:
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/set-validator][set-validator]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/get-validator][get-validator]]\\
Common Var metadata:
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/doc][doc]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/find-doc][find-doc]]
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/test][test]]
