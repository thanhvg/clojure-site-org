This page contains solutions to the "Test your knowledge" sections of
the [[file:syntax.org][Learn Clojure]] guide.

* [[file:syntax.xml#_test_your_knowledge][Syntax]]
  :PROPERTIES:
  :CUSTOM_ID: _syntax
  :END:

1. Using the REPL, compute the sum of 7654 and 1234.

   #+BEGIN_SRC clojure
       user=> (+ 7654 1234)
       8888
   #+END_SRC

2. Rewrite the following algebraic expression as a Clojure expression:
   =( 7 + 3 * 4 + 5 ) / 10=.

   #+BEGIN_SRC clojure
       (/ (+ 7 (* 3 4) 5) 10)
   #+END_SRC

3. Using REPL documentation functions, find the documentation for the
   rem and mod functions. Compare the results of the provided
   expressions based on the documentation.

   #+BEGIN_SRC clojure
       user=> (doc rem)
       clojure.core/rem
       ([num div])
         remainder of dividing numerator by denominator.
       nil

       user=> (doc mod)
       clojure.core/mod
       ([num div])
         Modulus of num and div. Truncates toward negative infinity.
       nil
   #+END_SRC

4. Using find-doc, find the function that prints the stack trace of the
   most recent REPL exception.

   =pst=

* [[file:functions.xml#_test_your_knowledge][Functions]]
  :PROPERTIES:
  :CUSTOM_ID: _functions
  :END:

1.  Define a function =greet= that takes no arguments and prints
    "Hello".

    #+BEGIN_SRC clojure
        (defn greet []
          (println "Hello"))
    #+END_SRC

2.  Redefine greet using =def= with =fn= and =#()=.

    #+BEGIN_SRC clojure
        ;; using fn
        (def greet
          (fn [] (println "Hello")))

        ;; using #()
        (def greet
          #(println "Hello"))
    #+END_SRC

3.  Define a function =greeting= ...​

    #+BEGIN_SRC clojure
        (defn greeting
          ([] (greeting "Hello" "World"))
          ([x] (greeting "Hello" x))
          ([x y] (str x ", " y "!")))
    #+END_SRC

4.  Define a function =do-nothing= ...​

    #+BEGIN_SRC clojure
        (defn do-nothing [x] x)
    #+END_SRC

5.  Define a function =always-thing= ...​

    #+BEGIN_SRC clojure
        (defn always-thing [& xs] 100)
    #+END_SRC

6.  Define a function =make-thingy= ...​

    #+BEGIN_SRC clojure
        (defn make-thingy [x]
          (fn [& args] x))
    #+END_SRC

7.  Define a function =triplicate= ...​

    #+BEGIN_SRC clojure
        (defn triplicate [f]
          (f) (f) (f))
    #+END_SRC

8.  Define a function =opposite= ...​

    #+BEGIN_SRC clojure
        (defn opposite [f]
          (fn [& args] (not (apply f args))))
    #+END_SRC

9.  Define a function =triplicate2= ...​

    #+BEGIN_SRC clojure
        (defn triplicate2 [f & args]
          (triplicate (fn [] (apply f args))))
    #+END_SRC

10. Using the =java.lang.Math= class ...​

    #+BEGIN_SRC clojure
        user=> (Math/cos Math/PI)
        -1.0
        user=> (+ (Math/pow (Math/sin 0.2) 2)
                  (Math/pow (Math/cos 0.2) 2))
        1.0
    #+END_SRC

11. Define a function that takes an HTTP URL as a string...​

    #+BEGIN_SRC clojure
        (defn http-get [url]
          (slurp
            (.openStream
              (java.net.URL. url))))
    #+END_SRC

    #+BEGIN_SRC clojure
        (defn http-get [url]
          (slurp url))
    #+END_SRC

12. Define a function =one-less-arg=:

    #+BEGIN_SRC clojure
        (defn one-less-arg [f x]
          (fn [& args] (apply f x args)))
    #+END_SRC

13. Define a function =two-fns=:

    #+BEGIN_SRC clojure
        (defn two-fns [f g]
          (fn [x] (f (g x))))
    #+END_SRC


