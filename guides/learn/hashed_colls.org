As described in the previous section, there are four key Clojure
collection types: vectors, lists, sets, and maps. Of those four
collection types, sets and maps are hashed collections, designed for
efficient lookup of elements.

* Sets
  :PROPERTIES:
  :CUSTOM_ID: _sets
  :END:

Sets are like mathematical sets - unordered and with no duplicates. Sets
are ideal for efficiently checking whether a collection contains an
element, or to remove any arbitrary element.

#+BEGIN_SRC clojure
    (def players #{"Alice", "Bob", "Kelly"})
#+END_SRC

** Adding to a set
   :PROPERTIES:
   :CUSTOM_ID: _adding_to_a_set
   :END:

As with vectors and lists, =conj= is used to add elements.

#+BEGIN_EXAMPLE
    user=> (conj players "Fred")
    #{"Alice" "Fred" "Bob" "Kelly"}
#+END_EXAMPLE

** Removing from a set
   :PROPERTIES:
   :CUSTOM_ID: _removing_from_a_set
   :END:

The =disj= ("disjoin") function is used to remove one or more elements
from a set.

#+BEGIN_EXAMPLE
    user=> (disj players "Bob" "Sal")
    #{"Alice" "Kelly"}
#+END_EXAMPLE

** Checking containment
   :PROPERTIES:
   :CUSTOM_ID: _checking_containment
   :END:

#+BEGIN_EXAMPLE
    user=> (contains? players "Kelly")
    true
#+END_EXAMPLE

** Sorted sets
   :PROPERTIES:
   :CUSTOM_ID: _sorted_sets
   :END:

Sorted sets are sorted according to a comparator function which can
compare two elements. By default, Clojure's =compare= function is used,
which sorts in "natural" order for numbers, strings, etc.

#+BEGIN_EXAMPLE
    user=> (conj (sorted-set) "Bravo" "Charlie" "Sigma" "Alpha")
    #{"Alpha" "Bravo" "Charlie" "Sigma"}
#+END_EXAMPLE

A custom comparator can also be used with =sorted-set-by=.

** =into=
   :PROPERTIES:
   :CUSTOM_ID: __literal_into_literal
   :END:

=into= is used for putting one collection into another.

#+BEGIN_EXAMPLE
    user=> (def players #{"Alice" "Bob" "Kelly"})
    user=> (def new-players ["Tim" "Sue" "Greg"])
    user=> (into players new-players)
    #{"Alice" "Greg" "Sue" "Bob" "Tim" "Kelly"}
#+END_EXAMPLE

=into= returns a collection of the same type as its first argument.

* Maps
  :PROPERTIES:
  :CUSTOM_ID: _maps
  :END:

Maps are commonly used for two purposes - to manage an association of
keys to values and to represent domain application data. The first use
case is often referred to as dictionaries or hash maps in other
languages.

** Creating a literal map
   :PROPERTIES:
   :CUSTOM_ID: _creating_a_literal_map
   :END:

Maps are represented as alternating keys and values surrounded by ={=
and =}=.

#+BEGIN_SRC clojure
    (def scores {"Fred"  1400
                 "Bob"   1240
                 "Angela" 1024})
#+END_SRC

When Clojure prints a map at the REPL, it will put `,'s between each
key/value pair. These are purely used for readability - commas are
treated as whitespace in Clojure. Feel free to use them in cases where
they help you!

#+BEGIN_SRC clojure
    ;; same as the last one!
    (def scores {"Fred" 1400, "Bob" 1240, "Angela" 1024})
#+END_SRC

** Adding new key-value pairs
   :PROPERTIES:
   :CUSTOM_ID: _adding_new_key_value_pairs
   :END:

New values are added to maps with the =assoc= (short for "associate")
function:

#+BEGIN_EXAMPLE
    user=> (assoc scores "Sally" 0)
    {"Angela" 1024, "Bob" 1240, "Fred" 1400, "Sally" 0}
#+END_EXAMPLE

If the key used in =assoc= already exists, the value is replaced.

#+BEGIN_EXAMPLE
    user=> (assoc scores "Bob" 0)
    {"Angela" 1024, "Bob" 0, "Fred" 1400}
#+END_EXAMPLE

** Removing key-value pairs
   :PROPERTIES:
   :CUSTOM_ID: _removing_key_value_pairs
   :END:

The complementary operation for removing key-value pairs is =dissoc=
("dissociate"):

#+BEGIN_EXAMPLE
    user=> (dissoc scores "Bob")
    {"Angela" 1024, "Fred" 1400}
#+END_EXAMPLE

** Looking up by key
   :PROPERTIES:
   :CUSTOM_ID: _looking_up_by_key
   :END:

There are several ways to look up a value in a map. The most obvious is
the function =get=:

#+BEGIN_EXAMPLE
    user=> (get scores "Angela")
    1024
#+END_EXAMPLE

When the map in question is being treated as a constant lookup table,
its common to invoke the map itself, treating it as a function:

#+BEGIN_EXAMPLE
    user=> (def directions {:north 0
                            :east 1
                            :south 2
                            :west 3})
    #'user/directions

    user=> (directions :north)
    0
#+END_EXAMPLE

You should not directly invoke a map unless you can guarantee it will be
non-nil:

#+BEGIN_EXAMPLE
    user=> (def bad-lookup-map nil)
    #'user/bad-lookup-map

    user=> (bad-lookup-map :foo)
    Execution error (NullPointerException) at user/eval154 (REPL:1).
    null
#+END_EXAMPLE

** Looking up with a default
   :PROPERTIES:
   :CUSTOM_ID: _looking_up_with_a_default
   :END:

If you want to do a lookup and fall back to a default value when the key
is not found, specify the default as an extra parameter:

#+BEGIN_EXAMPLE
    user=> (get scores "Sam" 0)
    0
    â€‹
    user=> (directions :northwest -1)
    -1
#+END_EXAMPLE

Using a default is also helpful to distinguish between a missing key and
an existing key with a =nil= value.

** Checking contains
   :PROPERTIES:
   :CUSTOM_ID: _checking_contains
   :END:

There are two other functions that are helpful in checking whether a map
contains an entry.

#+BEGIN_EXAMPLE
    user=> (contains? scores "Fred")
    true

    user=> (find scores "Fred")
    ["Fred" 1400]
#+END_EXAMPLE

The =contains?= function is a predicate for checking containment. The
=find= function finds the key/value entry in a map, not just the value.

** Keys or values
   :PROPERTIES:
   :CUSTOM_ID: _keys_or_values
   :END:

You can also get just the keys or just the values in a map:

#+BEGIN_EXAMPLE
    user=> (keys scores)
    ("Fred" "Bob" "Angela")

    user=> (vals scores)
    (1400 1240 1024)
#+END_EXAMPLE

While maps are unordered, there is a guarantee that keys, vals, and
other functions that walk in "sequence" order will always walk a
particular map instance entries in the same order.

** Building a map
   :PROPERTIES:
   :CUSTOM_ID: _building_a_map
   :END:

The =zipmap= function can be used to "zip" together two sequences (the
keys and vals) into a map:

#+BEGIN_EXAMPLE
    user=> (def players #{"Alice" "Bob" "Kelly"})
    #'user/players

    user=> (zipmap players (repeat 0))
    {"Kelly" 0, "Bob" 0, "Alice" 0}
#+END_EXAMPLE

There are a variety of other ways to build up a map using Clojure's
sequence functions (which we have not yet discussed). Come back to these
later!

#+BEGIN_SRC clojure
    ;; with map and into
    (into {} (map (fn [player] [player 0]) players))

    ;; with reduce
    (reduce (fn [m player]
              (assoc m player 0))
            {} ; initial value
            players)
#+END_SRC

** Combining maps
   :PROPERTIES:
   :CUSTOM_ID: _combining_maps
   :END:

The =merge= function can be used to combine multiple maps into a single
map:

#+BEGIN_EXAMPLE
    user=> (def new-scores {"Angela" 300 "Jeff" 900})
    #'user/new-scores

    user=> (merge scores new-scores)
    {"Fred" 1400, "Bob" 1240, "Jeff" 900, "Angela" 300}
#+END_EXAMPLE

We merged two maps here but you can pass more as well.

If both maps contain the same key, the rightmost one wins. Alternately,
you can use =merge-with= to supply a function to invoke when there is a
conflict:

#+BEGIN_EXAMPLE
    user=> (def new-scores {"Fred" 550 "Angela" 900 "Sam" 1000})
    #'user/new-scores

    user=> (merge-with + scores new-scores)
    {"Sam" 1000, "Fred" 1950, "Bob" 1240, "Angela" 1924}
#+END_EXAMPLE

In the case of a conflict, the function is called on both values to get
the new value.

** Sorted maps
   :PROPERTIES:
   :CUSTOM_ID: _sorted_maps
   :END:

Similar to sorted sets, sorted maps maintain the keys in sorted order
based on a comparator, using =compare= as the default comparator
function.

#+BEGIN_EXAMPLE
    user=> (def sm (sorted-map
             "Bravo" 204
             "Alfa" 35
             "Sigma" 99
             "Charlie" 100))
    {"Alfa" 35, "Bravo" 204, "Charlie" 100, "Sigma" 99}

    user=> (keys sm)
    ("Alfa" "Bravo" "Charlie" "Sigma")

    user=> (vals sm)
    (35 204 100 99)
#+END_EXAMPLE

* Representing application domain information
  :PROPERTIES:
  :CUSTOM_ID: _representing_application_domain_information
  :END:

When we need to represent many domain information with the same set of
fields known in advance, you can use a map with keyword keys.

#+BEGIN_SRC clojure
    (def person
      {:first-name "Kelly"
       :last-name "Keen"
       :age 32
       :occupation "Programmer"})
#+END_SRC

** Field accessors
   :PROPERTIES:
   :CUSTOM_ID: _field_accessors
   :END:

Since this is a map, the ways we've already discussed for looking up a
value by key also work:

#+BEGIN_EXAMPLE
    user=> (get person :occupation)
    "Programmer"

    user=> (person :occupation)
    "Programmer"
#+END_EXAMPLE

But really, the most common way to get field values for this use is by
invoking the keyword. Just like with maps and sets, keywords are also
functions. When a keyword is invoked, it looks itself up in the
associative data structure that it was passed.

#+BEGIN_EXAMPLE
    user=> (:occupation person)
    "Programmer"
#+END_EXAMPLE

Keyword invocation also takes an optional default value:

#+BEGIN_EXAMPLE
    user=> (:favorite-color person "beige")
    "beige"
#+END_EXAMPLE

** Updating fields
   :PROPERTIES:
   :CUSTOM_ID: _updating_fields
   :END:

Since this is a map, we can just use =assoc= to add or modify fields:

#+BEGIN_EXAMPLE
    user=> (assoc person :occupation "Baker")
    {:age 32, :last-name "Keen", :first-name "Kelly", :occupation "Baker"}
#+END_EXAMPLE

** Removing a field
   :PROPERTIES:
   :CUSTOM_ID: _removing_a_field
   :END:

Use dissoc to remove fields:

#+BEGIN_EXAMPLE
    user=> (dissoc person :age)
    {:last-name "Keen", :first-name "Kelly", :occupation "Programmer"}
#+END_EXAMPLE

** Nested entities
   :PROPERTIES:
   :CUSTOM_ID: _nested_entities
   :END:

It is common to see entities nested within other entities:

#+BEGIN_SRC clojure
    (def company
      {:name "WidgetCo"
       :address {:street "123 Main St"
                 :city "Springfield"
                 :state "IL"}})
#+END_SRC

You can use =get-in= to access fields at any level inside nested
entities:

#+BEGIN_EXAMPLE
    user=> (get-in company [:address :city])
    "Springfield"
#+END_EXAMPLE

You can also use =assoc-in= or =update-in= to modify nested entities:

#+BEGIN_EXAMPLE
    user=> (assoc-in company [:address :street] "303 Broadway")
    {:name "WidgetCo",
     :address
     {:state "IL",
      :city "Springfield",
      :street "303 Broadway"}}
#+END_EXAMPLE

** Records
   :PROPERTIES:
   :CUSTOM_ID: _records
   :END:

An alternative to using maps is to create a "record". Records are
designed specifically for this use case and generally have better
performance. In addition, they have a named "type" which can be used for
polymorphic behavior (more on that later).

Records are defined with the list of field names for record instances.
These will be treated as keyword keys in each record instance.

#+BEGIN_SRC clojure
    ;; Define a record structure
    (defrecord Person [first-name last-name age occupation])

    ;; Positional constructor - generated
    (def kelly (->Person "Kelly" "Keen" 32 "Programmer"))

    ;; Map constructor - generated
    (def kelly (map->Person
                 {:first-name "Kelly"
                  :last-name "Keen"
                  :age 32
                  :occupation "Programmer"}))
#+END_SRC

Records are used almost exactly the same as maps, with the caveat that
they cannot be invoked as a function like maps.

#+BEGIN_EXAMPLE
    user=> (:occupation kelly)
    "Programmer"
#+END_EXAMPLE
