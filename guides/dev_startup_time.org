Did you know:

- Most libraries are distributed as source and you compile them over and
  over

- You can compile namespaces explicitly using
  [[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/compile][=compile=]]

- Namespace compilation is transitive

- =compile= writes these files to disk and =require= will use them

- You can use =compile= on the namespace you load when you start
  development, or on your =user.clj=, or on the main namespace you run
  as a server to improve your startup time

The =compile= function takes a namespace symbol and compiles that
namespace and all the namespaces it requires into
[[https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/%2Acompile-path%2A][=*compile-path*=]]
(which defaults to =classes=). That directory must exist and be on your
classpath:

#+BEGIN_SRC clojure
    (compile 'my.namespace)    ;; writes .class files to *compile-path*
#+END_SRC

Subsequently, when any of those compiled namespaces are required, the
class file will be loaded, rather than the original =.clj= file. If a
source file is updated (and thus newer), it will be loaded instead.
Periodically, you will need to re-compile to account for new
dependencies or changing code.

One special case is the =user.clj= file loaded automatically by the
Clojure runtime, before any other code is loaded. If you are using a
=user.clj= in dev, you need to force a reload because it has already
been loaded automatically:

#+BEGIN_SRC clojure
    (binding [*compile-files* true] (require 'user :reload-all))
#+END_SRC

That's it! This technique can substantially reduce your startup time
during development, particularly as the number of dependencies you load
increases.

* Using an alias for development
  :PROPERTIES:
  :CUSTOM_ID: _using_an_alias_for_development
  :END:

In a deps.edn project, you should create a development alias (like
=:dev=) that includes the =classes= directory:

#+BEGIN_SRC clojure
    {:deps { ... }
     :aliases
     {:dev {:extra-paths ["classes"]}}}
#+END_SRC

You will also need to ensure the =classes= directory exists. It may be
useful to include the empty =classes= directory as part of your version
controlled project structure (make sure to ignore and NOT include the
compiled .class files).

You can then start your REPL with the alias and =compile= to populate
your =classes= directory and start seeing the benefits:

#+BEGIN_EXAMPLE
    $ clj -A:dev
    Clojure 1.10.1
    user=> (compile 'my.namespace)
#+END_EXAMPLE

* Incorporating user.clj into your development alias
  :PROPERTIES:
  :CUSTOM_ID: _incorporating_user_clj_into_your_development_alias
  :END:

If you want to use an automatically loaded user.clj, you should
incorporate that into your dev alias by adding a source path =dev=:

#+BEGIN_SRC clojure
    {:deps { ... }
     :aliases
     {:dev {:extra-paths ["dev" "classes"]}}}
#+END_SRC

And then create =dev/user.clj=:

#+BEGIN_SRC clojure
    (ns user
      (:require ... ))

    ;; dev-only functions, etc
#+END_SRC

Remember to use the modified compilation process for user.clj:

#+BEGIN_EXAMPLE
    $ clj -A:dev
    Clojure 1.10.1
    user=> (binding [*compile-files* true] (require 'user :reload-all))
#+END_EXAMPLE
